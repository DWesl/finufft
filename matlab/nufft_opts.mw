% nufft_opts.mw
%   FINUFFT opts wrapper

$ #include <finufft.h>

@ nufft_opts.m --------------------------------------------

classdef nufft_opts < handle

  properties
    mwptr
  end

  methods

    function [opts] = nufft_opts()
      # nufft_opts* o = new nufft_opts();
      # finufft_default_opts(nufft_opts *o);
      opts.mwptr = o;
    end

    function delete(o)
      # delete(nufft_opts* o);
    end

    function set_debug(o, debug)
      $ void set_debug(nufft_opts* o, int& debug) {
      $   o->debug = debug;
      $ }
      # set_debug(nufft_opts* o, int& debug);
    end

    function [debug] = get_debug(o)
      $ void get_debug(nufft_opts* o, int& debug) {
      $   debug = o->debug;
      $ }
      # get_debug(nufft_opts* o, output int& debug);
    end

    function set_spread_debug(o, spread_debug)
      $ void set_spread_debug(nufft_opts* o, int& spread_debug) {
      $   o->spread_debug = spread_debug;
      $ }
      # set_spread_debug(nufft_opts* o, int& spread_debug);
    end

    function [spread_debug] = get_spread_debug(o)
      $ void get_spread_debug(nufft_opts* o, int& spread_debug) {
      $   spread_debug = o->spread_debug;
      $ }
      # get_spread_debug(nufft_opts* o, output int& spread_debug);
    end

    function set_spread_sort(o, spread_sort)
      $ void set_spread_sort(nufft_opts* o, int& spread_sort) {
      $   o->spread_sort = spread_sort;
      $ }
      # set_spread_sort(nufft_opts* o, int& spread_sort);
    end

    function [spread_sort] = get_spread_sort(o)
      $ void get_spread_sort(nufft_opts* o, int& spread_sort) {
      $   spread_sort = o->spread_sort;
      $ }
      # get_spread_sort(nufft_opts* o, output int& spread_sort);
    end

    function set_spread_kerevalmeth(o, spread_kerevalmeth)
      $ void set_spread_kerevalmeth(nufft_opts* o, int& spread_kerevalmeth) {
      $   o->spread_kerevalmeth = spread_kerevalmeth;
      $ }
      # set_spread_kerevalmeth(nufft_opts* o, int& spread_kerevalmeth);
    end

    function [spread_kerevalmeth] = get_spread_kerevalmeth(o)
      $ void get_spread_kerevalmeth(nufft_opts* o, int& spread_kerevalmeth) {
      $   spread_kerevalmeth = o->spread_kerevalmeth;
      $ }
      # get_spread_kerevalmeth(nufft_opts* o, output int& spread_kerevalmeth);
    end

    function set_spread_kerpad(o, spread_kerpad)
      $ void set_spread_kerpad(nufft_opts* o, int& spread_kerpad) {
      $   o->spread_kerpad = spread_kerpad;
      $ }
      # set_spread_kerpad(nufft_opts* o, int& spread_kerpad);
    end

    function [spread_kerpad] = get_spread_kerpad(o)
      $ void get_spread_kerpad(nufft_opts* o, int& spread_kerpad) {
      $   spread_kerpad = o->spread_kerpad;
      $ }
      # get_spread_kerpad(nufft_opts* o, output int& spread_kerpad);
    end

    function set_chkbnds(o, chkbnds)
      $ void set_chkbnds(nufft_opts* o, int& chkbnds) {
      $   o->chkbnds = chkbnds;
      $ }
      # set_chkbnds(nufft_opts* o, int& chkbnds);
    end

    function [chkbnds] = get_chkbnds(o)
      $ void get_chkbnds(nufft_opts* o, int& chkbnds) {
      $   chkbnds = o->chkbnds;
      $ }
      # get_chkbnds(nufft_opts* o, output int& chkbnds);
    end

    function set_modeord(o, modeord)
      $ void set_modeord(nufft_opts* o, int& modeord) {
      $   o->modeord = modeord;
      $ }
      # set_modeord(nufft_opts* o, int& modeord);
    end

    function [modeord] = get_modeord(o)
      $ void get_modeord(nufft_opts* o, int& modeord) {
      $   modeord = o->modeord;
      $ }
      # get_modeord(nufft_opts* o, output int& modeord);
    end

    function set_spread_scheme(o, spread_scheme)
      $ void set_spread_scheme(nufft_opts* o, int& spread_scheme) {
      $   o->spread_scheme = spread_scheme;
      $ }
      # set_spread_scheme(nufft_opts* o, int& spread_scheme);
    end

    function [spread_scheme] = get_spread_scheme(o)
      $ void get_spread_scheme(nufft_opts* o, int& spread_scheme) {
      $   spread_scheme = o->spread_scheme;
      $ }
      # get_spread_scheme(nufft_opts* o, output int& spread_scheme);
    end

    function set_fftw(o, fftw)
      $ void set_fftw(nufft_opts* o, int& fftw) {
      $   o->fftw = !fftw ? FFTW_ESTIMATE : FFTW_MEASURE;
      $ }
      # set_fftw(nufft_opts* o, int& fftw);
    end

    function [fftw] = get_fftw(o)
      $ void get_fftw(nufft_opts* o, int& fftw) {
      $   fftw = o->fftw;
      $ }
      # get_fftw(nufft_opts* o, output int& fftw);
    end

    function set_upsampfac(o, upsampfac)
      $ void set_upsampfac(nufft_opts* o, double& upsampfac) {
      $   o->upsampfac = upsampfac;
      $ }
      # set_upsampfac(nufft_opts* o, double& upsampfac);
    end

    function [upsampfac] = get_upsampfac(o)
      $ void get_upsampfac(nufft_opts* o, double& upsampfac) {
      $   upsampfac = o->upsampfac;
      $ }
      # get_upsampfac(nufft_opts* o, output double& upsampfac);
    end

  end
end
